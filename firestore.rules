rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions (Corrected/Simplified - or remove if unused) ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      // Ensure request.auth is not null before accessing uid
      return isAuthenticated() && request.auth.uid == userId;
    }

    function hasAppRole(role) {
      // Ensure token and appRole exist
      return isAuthenticated() && request.auth.token != null && request.auth.token.appRole == role;
    }

    function isActualWorker() {
      return isAuthenticated() && request.auth.token != null && request.auth.token.isActualGigWorker == true;
    }

    function isActualBuyer() {
      return isAuthenticated() && request.auth.token != null && request.auth.token.isActualBuyer == true;
    }

    function isInWorkerContext() {
        // Ensure request.auth is not null before using its uid
        return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.currentActiveRole == "GIG_WORKER";
    }
    function isInBuyerContext() {
        return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.currentActiveRole == "BUYER";
    }

    function isGigParticipant(gigDocData) { // Pass gigDoc.data directly
      return gigDocData != null &&
             isAuthenticated() &&
             (request.auth.uid == gigDocData.buyerFirebaseUid || request.auth.uid == gigDocData.workerFirebaseUid);
    }

    // Corrected `fieldIsUnchangedIfExists` - This specific version means:
    // IF the field is present in the incoming request.resource.data, THEN its value must be the same as in the existing resource.data.
    // If the field is NOT present in request.resource.data, this part of the condition is true (field is not being changed by this update).
    // This also implies that the field cannot be deleted if this function is used to protect an immutable field.
    function fieldIsImmutable(fieldName) {
        return (! (fieldName in request.resource.data)) || // Field is not in the incoming update (not being touched)
               (request.resource.data[fieldName] == resource.data[fieldName]); // OR field is in incoming update and matches existing
    }
    // If a field truly cannot be deleted once set:
    function fieldIsImmutableAndCannotBeDeleted(fieldName){
        return (fieldName in resource.data) ? // If field exists in current document
                 ( (fieldName in request.resource.data) && request.resource.data[fieldName] == resource.data[fieldName] ) // It must exist in new data and be unchanged
                 : true; // If it didn't exist, this rule doesn't restrict its creation
    }


    // --- Users Collection (`users` -> assumed to be `publicUserProfiles`) ---
    // Document ID is firebaseUid
    match /users/{userId} {
      allow read: if true;

      allow create: if isOwner(userId)
                      && request.resource.data.firebaseUid == userId
                      && request.resource.data.keys().hasAll(['firebaseUid', 'displayName', 'profileImageUrl', 'currentActiveRole', 'canBeBuyer', 'canBeGigWorker', 'createdAt', 'fcmToken'])
                      && request.resource.data.createdAt == request.time
                      && request.resource.data.canBeBuyer == (request.auth.token.isActualBuyer || false)
                      && request.resource.data.canBeGigWorker == (request.auth.token.isActualGigWorker || false);

      allow update: if isOwner(userId)
                      && fieldIsImmutableAndCannotBeDeleted('firebaseUid') // Use the corrected helper or inline
                      && fieldIsImmutableAndCannotBeDeleted('createdAt')
                      && fieldIsImmutableAndCannotBeDeleted('canBeBuyer')
                      && fieldIsImmutableAndCannotBeDeleted('canBeGigWorker')
                      && fieldIsImmutable('workerAverageRating') // These can be absent from update, but if present, must be same
                      && fieldIsImmutable('workerTotalGigsCompleted')
                      && fieldIsImmutable('workerResponseRatePercent')
                      && request.resource.data.diff(resource.data).affectedKeys()
                           .hasOnly(['displayName', 'profileImageUrl', 'currentActiveRole', 'workerPublicBio', 'workerAvailabilitySummary', 'workerQrCodeUrl', 'buyerPublicCompanyName', 'isOnline', 'lastSeen', 'fcmToken', 'workerPublicSkillsSummary']);

      allow delete: if false;


      match /notifications/{notificationId} {
        allow read, delete: if isOwner(userId);
        allow create: if false;
        allow update: if isOwner(userId)
                        && request.resource.data.keys().hasOnly(['isRead'])
                        && request.resource.data.isRead == true
                        && resource.data.isRead == false;
      }
    }


    match /gigs/{gigId} {
      allow read: if true;

      allow create: if isAuthenticated() && isActualBuyer() && isInBuyerContext()
                      && request.resource.data.buyerFirebaseUid == request.auth.uid
                      && request.resource.data.keys().hasAll([
                           'title', 'publicDescription', 'roleNeeded', 'status',
                           'publicLocation', 'startTime', 'endTime', 'publicRateDisplay',
                           'buyerFirebaseUid', 'buyerDisplayName', 'buyerProfileImageUrl',
                           'requiredSkillsKeywords', 'createdAt'
                         ])
                      && request.resource.data.status == 'PENDING_WORKER_ACCEPTANCE'
                      && request.resource.data.createdAt == request.time
                      && request.resource.data.workerFirebaseUid == null;

      allow update: if isAuthenticated()
                      && fieldIsImmutableAndCannotBeDeleted('buyerFirebaseUid') // Assuming gigId is doc ID
                      && fieldIsImmutableAndCannotBeDeleted('createdAt')
                      && (
                          ( // Scenario 1: Buyer updates PENDING gig
                            isActualBuyer() && isInBuyerContext() &&
                            request.auth.uid == resource.data.buyerFirebaseUid &&
                            resource.data.status == 'PENDING_WORKER_ACCEPTANCE' &&
                            request.resource.data.diff(resource.data).affectedKeys()
                              .hasOnly(['title', 'publicDescription', 'roleNeeded', 'publicLocation', 'startTime', 'endTime', 'publicRateDisplay', 'requiredSkillsKeywords', 'status'])
                          )
                       || ( // Scenario 2: Worker accepts/declines PENDING gig
                            isActualWorker() && isInWorkerContext() &&
                            resource.data.status == 'PENDING_WORKER_ACCEPTANCE' &&
                            request.resource.data.workerFirebaseUid == request.auth.uid &&
                            (request.resource.data.status == 'ACCEPTED' || request.resource.data.status == 'DECLINED_BY_WORKER') &&
                            (request.resource.data.status == 'DECLINED_BY_WORKER' || // No need to check names if declining
                              (request.resource.data.workerDisplayName != null && request.resource.data.workerProfileImageUrl != null)
                            ) &&
                            request.resource.data.diff(resource.data).affectedKeys()
                              .hasOnly(['status', 'workerFirebaseUid', 'workerDisplayName', 'workerProfileImageUrl'])
                          )
                       || ( // Scenario 3: Assigned worker updates status
                            isActualWorker() && isInWorkerContext() &&
                            request.auth.uid == resource.data.workerFirebaseUid &&
                            (resource.data.status == 'ACCEPTED' || resource.data.status == 'IN_PROGRESS') &&
                            (request.resource.data.status == 'IN_PROGRESS' || request.resource.data.status == 'PENDING_COMPLETION') &&
                            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status'])
                          )
                       || ( // Scenario 4: Buyer updates status
                            isActualBuyer() && isInBuyerContext() &&
                            request.auth.uid == resource.data.buyerFirebaseUid &&
                            (resource.data.status == 'ACCEPTED' || resource.data.status == 'IN_PROGRESS' || resource.data.status == 'PENDING_COMPLETION') &&
                            (request.resource.data.status == 'PENDING_COMPLETION' || request.resource.data.status == 'CANCELLED_BY_BUYER' || request.resource.data.status == 'COMPLETED') && // Buyer can mark completed
                            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status'])
                          )
                       || ( // Scenario 5: Backend/Admin updates
                            (hasAppRole('ADMIN') || hasAppRole('SUPER_ADMIN')) &&
                            request.resource.data.diff(resource.data).affectedKeys()
                              .hasOnly(['status', 'moderationStatusInternalUse', 'workerFirebaseUid', 'workerDisplayName', 'workerProfileImageUrl' /* Admins might assign/change worker or fix details */])
                          )
                      );

      allow delete: if isAuthenticated() && isActualBuyer() && isInBuyerContext()
                      && request.auth.uid == resource.data.buyerFirebaseUid
                      && resource.data.status == 'PENDING_WORKER_ACCEPTANCE';

      match /messages/{messageId} {
        function getGigDocumentData() { // Renamed to avoid conflict if helper is global
          return get(/databases/$(database)/documents/gigs/$(gigId)).data;
        }

        allow read: if isGigParticipant(getGigDocumentData());

        allow create: if isGigParticipant(getGigDocumentData())
                        && request.resource.data.senderFirebaseUid == request.auth.uid
                        && request.resource.data.keys().hasAll(['senderFirebaseUid', 'text', 'timestamp'])
                        && request.resource.data.timestamp == request.time
                        // Default values that client MUST set on create
                        && request.resource.data.isReadByReceiver == false
                        && request.resource.data.moderationStatus == 'PENDING';

        allow update: if false;
        
        allow delete: if isAuthenticated()
                        && request.auth.uid == resource.data.senderFirebaseUid
                        && resource.data.moderationStatus == 'PENDING';
      }
    }

    match /gigOffers/{offerId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.buyerFirebaseUid || request.auth.uid == resource.data.workerFirebaseUid);

      allow create: if isAuthenticated() && isActualBuyer() && isInBuyerContext()
                      && request.resource.data.buyerFirebaseUid == request.auth.uid
                      && request.resource.data.keys().hasAll(['gigTitleOrRef', 'buyerFirebaseUid', 'workerFirebaseUid', 'offeredRate', 'status', 'createdAt', 'expiresAt'])
                      && request.resource.data.status == 'SENT'
                      && request.resource.data.createdAt == request.time;

      allow update: if isAuthenticated() && isActualWorker() && isInWorkerContext()
                      && request.auth.uid == resource.data.workerFirebaseUid
                      && resource.data.status == 'SENT'
                      && (request.resource.data.status == 'ACCEPTED' || request.resource.data.status == 'DECLINED')
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']);

      allow delete: if isAuthenticated() && isActualBuyer() && isInBuyerContext()
                      && request.auth.uid == resource.data.buyerFirebaseUid
                      && resource.data.status == 'SENT';
    }

    match /public_reviews/{reviewId} {
      allow read: if true;
      allow create, update, delete: if false;
    }

    match /badge_definitions/{badgeDefId} {
      allow read: if true;
      allow create, update, delete: if false;
    }

    // Assuming you are using Firebase SDK for NextAuth.js adapter, default rules from adapter might be sufficient.
    // If you manage these paths manually or need tighter control:
    match /nextauth_users/{userId} {
      allow read, write: if isOwner(userId); // Or broader if admin needs access
    }
    match /nextauth_sessions/{sessionId} {
      allow read, write: if isAuthenticated() && get(/databases/$(database)/documents/nextauth_users/$(resource.data.userId)).data.firebaseUid == request.auth.uid; // Example, adapt to your session structure
    }
    match /nextauth_verification_tokens/{token} {
      allow read, delete: if true; // Typically open for creation and one-time read/delete by system
    }

    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2025, 6, 24);
    }
  }
}
